{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to reverb's documentation.","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>$python -m pip install git+https://github.com/sarthhh/reverb\n</code></pre>"},{"location":"api_reference/client/","title":"client","text":""},{"location":"api_reference/client/#reverb.client.LavalinkClient","title":"<code>LavalinkClient</code>","text":"<p>The main client class. This object contains all the methods and properties related to lavalink usage.</p> <p>Note</p> <p>This class should be initialised using the <code>.build()</code> classmethod and not directly.</p> Example <pre><code>from __future__ import annotations\nimport logging\nimport os\nimport hikari\nimport reverb\nTOKEN = os.environ[\"DEV_TOKEN\"]\nHOST = \"127.0.0.0\"\nPORT = 2333\nPASSWORD = \"youshallnotpass\"\nBOT_ID = 964195658468835358\nbot = hikari.GatewayBot(TOKEN, logs=\"DEBUG\")\nlavalink: reverb.LavalinkClient\n@bot.listen()\nasync def setup_lavalink(_: hikari.StartingEvent) -&gt; None:\nglobal lavalink\nlavalink = await reverb.LavalinkClient.build(\nhost=HOST, port=PORT, password=PASSWORD, application_id=BOT_ID, bot=bot\n)\n@bot.listen()\nasync def lavalink_ready(event: reverb.LavalinkReadyEvent) -&gt; None:\nlogging.info(\n\"connected to lavalink! Lavalink version: %s,  Session ID: %s\", lavalink.server_version, event.data.session_id\n)\nbot.run()\n</code></pre>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.application_id","title":"<code>application_id: int</code>  <code>class-attribute</code>","text":"<p>ID of your bot application.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.bot","title":"<code>bot: hikari.UndefinedOr[hikari.GatewayBot]</code>  <code>class-attribute</code>","text":"<p>Your hikari bot's instance, this is needed to dispatch the lavalink events.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.client_session","title":"<code>client_session: aiohttp.ClientSession</code>  <code>property</code>","text":"<p>The aiohttp ClientSession object was initiated with.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.gateway","title":"<code>gateway: GatewayHandler</code>  <code>property</code>","text":"<p>Gateway handler for the client.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.host","title":"<code>host: str</code>  <code>class-attribute</code>","text":"<p>Host of the Lavalink server.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.password","title":"<code>password: str = 'youshallnotpass'</code>  <code>class-attribute</code>","text":"<p>Password for connecting to the server.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.port","title":"<code>port: int</code>  <code>class-attribute</code>","text":"<p>Port of the lavalink server.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.rest","title":"<code>rest: RESTClient</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>    reverb.rest.RESTClient</code> <p>Rest handler for the client.</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.server_version","title":"<code>server_version: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>    str</code> <p>The version of lavalink server</p>"},{"location":"api_reference/client/#reverb.client.LavalinkClient.build","title":"<code>build(*, host, port, password='youshallnotpass', application_id, bot=hikari.UNDEFINED, client_session=hikari.UNDEFINED)</code>  <code>classmethod</code> <code>async</code>","text":"<p>Initialises a LavalinkClient class.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The lavalink host address.</p> required <code>port</code> <code>typing.SupportsInt</code> <p>Port to connect to.</p> required <code>password</code> <code>str</code> <p>The password to be used while connecting to the server.</p> <code>'youshallnotpass'</code> <code>application_id</code> <code>int</code> <p>ID of the bot application being used.</p> required <code>bot</code> <code>hikari.UndefinedOr[hikari.GatewayBot]</code> <p>The hikari bot instance.</p> <code>hikari.UNDEFINED</code> <code>client_session</code> <code>hikari.UndefinedOr[aiohttp.ClientSession]</code> <p>The custom clientsession class to use, if any.</p> <code>hikari.UNDEFINED</code> <p>Returns:</p> Type Description <code>    reverb.client.LavalinkClient</code> <p>The lavalink client that was initialised.</p> Source code in <code>reverb/client.py</code> <pre><code>@classmethod\nasync def build(\ncls,\n*,\nhost: str,\nport: typing.SupportsInt,\npassword: str = \"youshallnotpass\",\napplication_id: int,\nbot: hikari.UndefinedOr[hikari.GatewayBot] = hikari.UNDEFINED,\nclient_session: hikari.UndefinedOr[aiohttp.ClientSession] = hikari.UNDEFINED,\n) -&gt; LavalinkClient:\n\"\"\"Initialises a LavalinkClient class.\n    Parameters\n    ----------\n    host: str\n        The lavalink host address.\n    port: int\n        Port to connect to.\n    password: str\n        The password to be used while connecting to the server.\n    application_id: int\n        ID of the bot application being used.\n    bot: hikari.UndefinedOr[hikari.GatewayBot]\n        The hikari bot instance.\n    client_session: aiohttp.ClientSession\n        The custom clientsession class to use, if any.\n    Returns\n    -------\n        reverb.client.LavalinkClient\n        The lavalink client that was initialised.\n    \"\"\"\ninst = cls(\nhost=host if host.startswith(\"http\") else f\"http://{host}\",\nport=int(port),\npassword=password,\napplication_id=application_id,\nbot=bot,\n)\ninst._client_session = (\nclient_session if isinstance(client_session, aiohttp.ClientSession) else aiohttp.ClientSession()\n)\ninst._gateway = GatewayHandler(client=inst, client_session=inst.client_session)\ninst._rest = RESTClient(client=inst)\nawait inst.gateway.connect()\ninst._server_version = await inst.rest.get_version()\nreturn inst\n</code></pre>"}]}